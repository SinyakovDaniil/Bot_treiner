import json
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from openai import OpenAI
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import matplotlib.pyplot as plt
import io
import hashlib
from urllib.parse import urlencode
from flask import Flask, request
import threading
import os
import logging

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ---
from config import API_TOKEN, OPENROUTER_API_KEY, ROBOKASSA_LOGIN, ROBOKASSA_PASS1, ROBOKASSA_PASS2, WEBHOOK_URL, ADMIN_PASSWORD

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- OpenAI –∫–ª–∏–µ–Ω—Ç ---
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url='https://openrouter.ai/api/v1/' # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ
)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite ---
conn = sqlite3.connect('trainer_bot.db', check_same_thread=False)
cur = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT,
    age INTEGER,
    weight REAL,
    height REAL,
    goal TEXT,
    subscription_end_date TEXT DEFAULT NULL,
    trial_used BOOLEAN DEFAULT FALSE,
    last_weight_entry TEXT DEFAULT NULL,
    gender TEXT DEFAULT NULL,
    training_location TEXT DEFAULT NULL,
    level TEXT DEFAULT NULL
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS progress (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    weight REAL,
    date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS achievements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    description TEXT,
    unlocked_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS training_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    date TEXT,
    status TEXT, -- 'completed', 'skipped', 'scheduled'
    FOREIGN KEY (user_id) REFERENCES users (id)
)
""")

conn.commit()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_states = {}
scheduler = AsyncIOScheduler()
reminder_times = {} # {user_id: time_str}
loop = None # <-- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è asyncio —Ü–∏–∫–ª–∞

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_user_profile(user_id):
    cur.execute("SELECT name, age, weight, height, goal, gender, training_location, level FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    if row:
        return {
            "name": row[0],
            "age": row[1],
            "weight": row[2],
            "height": row[3],
            "goal": row[4],
            "gender": row[5],
            "training_location": row[6],
            "level": row[7]
        }
    return None

def is_subscribed(user_id):
    cur.execute("SELECT subscription_end_date FROM users WHERE id = ?", (user_id,))
    result = cur.fetchone()
    if result and result[0]:
        sub_end = datetime.fromisoformat(result[0])
        now = datetime.now()
        return now < sub_end
    return False

def get_trial_days_left(user_id):
    cur.execute("SELECT trial_used, subscription_end_date FROM users WHERE id = ?", (user_id,))
    result = cur.fetchone()
    if result:
        trial_used, sub_end_str = result
        if trial_used and sub_end_str:
            sub_end = datetime.fromisoformat(sub_end_str)
            now = datetime.now()
            if now < sub_end:
                delta = sub_end - now
                return delta.days + 1
    return 0

def add_achievement(user_id, title, description):
    now = datetime.now().isoformat()
    cur.execute("INSERT INTO achievements (user_id, title, description, unlocked_date) VALUES (?, ?, ?, ?)",
                (user_id, title, description, now))
    conn.commit()

def check_and_award_achievements(user_id, profile):
    # –ü—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    if profile and profile.get("name"):
        cur.execute("SELECT id FROM achievements WHERE user_id = ? AND title = ?", (user_id, "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"))
        if cur.fetchone() is None:
            add_achievement(user_id, "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "–ó–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞—á–∞–ª –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é!")

def save_training_log(user_id, date_str, status):
    cur.execute("INSERT INTO training_logs (user_id, date, status) VALUES (?, ?, ?)",
                (user_id, date_str, status))
    conn.commit()

def get_recent_training_status(user_id, days=3):
    since_date = datetime.now() - timedelta(days=days)
    cur.execute("SELECT status FROM training_logs WHERE user_id = ? AND date >= ? ORDER BY date DESC", (user_id, since_date.isoformat()))
    return [row[0] for row in cur.fetchall()]

def add_message_id(user_id, message_id):
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ –≤ –ë–î.
    if user_id not in user_states:
        user_states[user_id] = {"messages": []}
    user_states[user_id]["messages"].append(message_id)

async def delete_old_messages(user_id, keep_last=1):
    if user_id in user_states and "messages" in user_states[user_id]:
        messages = user_states[user_id]["messages"]
        if len(messages) > keep_last:
            to_delete = messages[:-keep_last]
            user_states[user_id]["messages"] = messages[-keep_last:]
            for msg_id in to_delete:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception as e:
                    logger.warning(f"Could not delete message {msg_id} for user {user_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cur.execute("SELECT id, trial_used FROM users WHERE id = ?", (user_id,))
    result = cur.fetchone()

    if not result:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
        cur.execute("INSERT INTO users (id, name) VALUES (?, ?)", (user_id, username))
        conn.commit()

        # –í—ã–¥–∞—ë–º –ø—Ä–æ–±–Ω—É—é –Ω–µ–¥–µ–ª—é, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
        cur.execute("SELECT trial_used FROM users WHERE id = ?", (user_id,))
        trial_used_result = cur.fetchone()
        if not trial_used_result or not trial_used_result[0]:
            trial_end_date = datetime.now() + timedelta(days=7)
            cur.execute("UPDATE users SET trial_used = TRUE, subscription_end_date = ? WHERE id = ?", (trial_end_date.isoformat(), user_id))
            conn.commit()
            logger.info(f"–í—ã–¥–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            msg = await message.answer("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è –Ø —Ç–≤–æ–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –¢—ã –ø–æ–ª—É—á–∏–ª <b>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏</b>! –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            add_message_id(user_id, msg.message_id)
            user_states[user_id] = {"step": "name", "data": {}}
        else:
            msg = await message.answer("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è –Ø —Ç–≤–æ–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            add_message_id(user_id, msg.message_id)
            user_states[user_id] = {"step": "name", "data": {}}
    else:
        # –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        logger.info(f"–°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
        msg = await message.answer("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        add_message_id(user_id, msg.message_id)

@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    if is_subscribed(message.from_user.id):
        days_left = get_trial_days_left(message.from_user.id)
        sub_end = datetime.fromisoformat(cur.execute("SELECT subscription_end_date FROM users WHERE id = ?", (message.from_user.id,)).fetchone()[0])
        msg = await message.answer(f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {sub_end.strftime('%d.%m.%Y')}.")
        add_message_id(message.from_user.id, msg.message_id)
        if days_left > 0:
            msg = await message.answer(f"–ò–∑ –Ω–∏—Ö <b>{days_left} –¥–Ω–µ–π</b> ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç –ø—Ä–æ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
            add_message_id(message.from_user.id, msg.message_id)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 499 —Ä—É–±", callback_data="buy_month")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 2499 —Ä—É–±", callback_data="buy_half_year")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 4999 —Ä—É–±", callback_data="buy_year")],
    ])
    msg = await message.answer("<b>–¢–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                         "1 –º–µ—Å—è—Ü ‚Äî 499 —Ä—É–±\n"
                         "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2499 —Ä—É–± (416 —Ä—É–±/–º–µ—Å)\n"
                         "1 –≥–æ–¥ ‚Äî 4999 —Ä—É–± (416 —Ä—É–±/–º–µ—Å)\n\n"
                         "<a href='https://docs.google.com/document/d/14NrOTKOJ2Dcd5-guVZGU7fRj9gj-wS1X/edit?usp=drive_link&ouid=111319375229341079989&rtpof=true&sd=true'>–û—Ñ–µ—Ä—Ç–∞</a>\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard)
    add_message_id(message.from_user.id, msg.message_id)

@dp.callback_query(lambda c: c.data.startswith('buy_'))
async def process_subscription_choice(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    choice = callback_query.data

    prices = {
        "buy_month": 499,
        "buy_half_year": 2499,
        "buy_year": 4999
    }
    months = {
        "buy_month": 1,
        "buy_half_year": 6,
        "buy_year": 12
    }

    price = prices[choice]
    months_added = months[choice]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Robokassa
    inv_id = user_id # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ InvoiceID
    desc = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months_added} –º–µ—Å—è—Ü–µ–≤"
    signature = hashlib.md5(f"{ROBOKASSA_LOGIN}:{price}:{inv_id}:{ROBOKASSA_PASS1}:shp_userid={user_id}".encode()).hexdigest()

    params = {
        'MerchantLogin': ROBOKASSA_LOGIN,
        'OutSum': price,
        'InvId': inv_id,
        'Desc': desc,
        'SignatureValue': signature,
        'Shp_userid': user_id,
        'Culture': 'ru',
        'Encoding': 'utf-8'
    }
    robokassa_url = "https://auth.robokassa.ru/Merchant/Index.aspx?" + urlencode(params) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã

    msg = await bot.send_message(user_id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months_added} –º–µ—Å—è—Ü–µ–≤ ({price} —Ä—É–±):\n{robokassa_url}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")
    add_message_id(user_id, msg.message_id)
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∫–µ—Ç—ã ---
@dp.message(lambda message: message.from_user.id in user_states and 'step' in user_states[message.from_user.id])
async def process_profile(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return
    state = user_states[user_id]
    step = state["step"]
    data = state["data"]

    if step == "name":
        name = message.text.strip()
        if len(name) < 2:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
            add_message_id(user_id, msg.message_id)
            return
        data["name"] = name
        state["step"] = "age"
        msg = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id, keep_last=0)

    elif step == "age":
        try:
            age = int(message.text.strip())
            if age < 10 or age > 100:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100).")
                add_message_id(user_id, msg.message_id)
                return
            data["age"] = age
            state["step"] = "gender"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
                [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
            ])
            msg = await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=keyboard)
            add_message_id(user_id, msg.message_id)
            await delete_old_messages(user_id, keep_last=0)
        except ValueError:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
            add_message_id(user_id, msg.message_id)

    elif step == "weight":
        try:
            weight = float(message.text.strip().replace(',', '.'))
            if weight < 30 or weight > 300:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥).")
                add_message_id(user_id, msg.message_id)
                return
            data["weight"] = weight
            state["step"] = "height"
            msg = await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
            add_message_id(user_id, msg.message_id)
            await delete_old_messages(user_id, keep_last=0)
        except ValueError:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π).")
            add_message_id(user_id, msg.message_id)

    elif step == "height":
        try:
            height = int(message.text.strip())
            if height < 100 or height > 250:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º (–æ—Ç 100 –¥–æ 250).")
                add_message_id(user_id, msg.message_id)
                return
            data["height"] = height
            state["step"] = "goal"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_lose_weight")],
                [InlineKeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="goal_gain_muscle")],
                [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="goal_maintain")]
            ])
            msg = await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=keyboard)
            add_message_id(user_id, msg.message_id)
            await delete_old_messages(user_id, keep_last=0)
        except ValueError:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
            add_message_id(user_id, msg.message_id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–Ω–∫–µ—Ç—ã ---
@dp.callback_query(lambda c: c.data in ['gender_male', 'gender_female', 'goal_lose_weight', 'goal_gain_muscle', 'goal_maintain'])
async def process_profile_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_states or 'step' not in user_states[user_id]:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
        return

    state = user_states[user_id]
    step = state["step"]
    data = state["data"]

    if step == "gender":
        data["gender"] = "–º—É–∂—Å–∫–æ–π" if callback_query.data == "gender_male" else "–∂–µ–Ω—Å–∫–∏–π"
        state["step"] = "weight"
        msg = await callback_query.message.edit_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?")
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id, keep_last=0)

    elif step == "goal":
        goals = {
            "goal_lose_weight": "–ü–æ—Ö—É–¥–µ—Ç—å",
            "goal_gain_muscle": "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É",
            "goal_maintain": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å"
        }
        data["goal"] = goals[callback_query.data]
        state["step"] = "training_location"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–º–∞", callback_data="location_home")],
            [InlineKeyboardButton(text="–í —Å–ø–æ—Ä—Ç–∑–∞–ª–µ", callback_data="location_gym")],
            [InlineKeyboardButton(text="–ù–∞ —É–ª–∏—Ü–µ", callback_data="location_outdoor")]
        ])
        msg = await callback_query.message.edit_text("–ì–¥–µ —Ç—ã –æ–±—ã—á–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?", reply_markup=keyboard)
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id, keep_last=0)

    elif step == "training_location":
        locations = {
            "location_home": "–î–æ–º–∞",
            "location_gym": "–í —Å–ø–æ—Ä—Ç–∑–∞–ª–µ",
            "location_outdoor": "–ù–∞ —É–ª–∏—Ü–µ"
        }
        data["training_location"] = locations[callback_query.data]
        state["step"] = "level"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
        ])
        msg = await callback_query.message.edit_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?", reply_markup=keyboard)
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id, keep_last=0)

    elif step == "level":
        levels = {
            "level_beginner": "–ù–æ–≤–∏—á–æ–∫",
            "level_intermediate": "–°—Ä–µ–¥–Ω–∏–π",
            "level_advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        }
        data["level"] = levels[callback_query.data]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        cur.execute("""
            UPDATE users SET name=?, age=?, gender=?, weight=?, height=?, goal=?, training_location=?, level=? WHERE id = ?
        """, (data["name"], data["age"], data["gender"], data["weight"], data["height"], data["goal"], data["training_location"], data["level"], user_id))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if user_id in user_states:
            del user_states[user_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞—ë–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        profile = get_user_profile(user_id)
        check_and_award_achievements(user_id, profile)

        msg = await callback_query.message.edit_text(
            f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ò–º—è: {data['name']}, –í–æ–∑—Ä–∞—Å—Ç: {data['age']}, –ü–æ–ª: {data['gender']}, –í–µ—Å: {data['weight']} –∫–≥, –†–æ—Å—Ç: {data['height']} —Å–º, –¶–µ–ª—å: {data['goal']}, –ú–µ—Å—Ç–æ: {data['training_location']}, –£—Ä–æ–≤–µ–Ω—å: {data['level']}. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        add_message_id(user_id, msg.message_id)

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫–∏) ---
@dp.message(Command("training"))
async def cmd_training(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    profile = get_user_profile(user_id)
    if not profile:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        add_message_id(user_id, msg.message_id)
        return

    print("‚úÖ –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /training") # –õ–æ–≥
    print(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile}") # –õ–æ–≥
    print(f"–ü–æ–¥–ø–∏—Å–∫–∞: {is_subscribed(user_id)}") # –õ–æ–≥

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    recent_statuses = get_recent_training_status(user_id, days=3)
    completed_count = recent_statuses.count('completed')
    if completed_count < 3:
        difficulty = "–ª—ë–≥–∫–∏–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
    else:
        difficulty = "—Å—Ä–µ–¥–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"

    prompt = f"""
    –¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –°–æ–∑–¥–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
    - –ò–º—è: {profile['name']}
    - –ü–æ–ª: {profile['gender']}
    - –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}
    - –í–µ—Å: {profile['weight']} –∫–≥
    - –†–æ—Å—Ç: {profile['height']} —Å–º
    - –¶–µ–ª—å: {profile['goal']}
    - –ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {profile['training_location']}
    - –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {profile['level']}
    - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {difficulty} –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞.
    - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30-45 –º–∏–Ω—É—Ç.
    –í–µ—Ä–Ω–∏ –ü–õ–ê–ù –¢–†–ï–ù–ò–†–û–í–ö–ò –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥—Ö–æ–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –æ—Ç–¥—ã—Ö–æ–º –º–µ–∂–¥—É.
    """

    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...") # –õ–æ–≥
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3000
        )
        print("–û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω") # –õ–æ–≥
        training_plan = response.choices[0].message.content
        msg = await message.answer(f"<b>–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{training_plan}")
        add_message_id(user_id, msg.message_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        today = datetime.now().date().isoformat()
        save_training_log(user_id, today, 'scheduled')

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"training_completed_{today}")],
            [InlineKeyboardButton(text=" —Å–¥–µ–ª–∞—é –ø–æ–∑–∂–µ ", callback_data=f"training_later_{today}")]
        ])
        msg2 = await message.answer("–í—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=keyboard)
        add_message_id(user_id, msg2.message_id)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}") # –õ–æ–≥
        msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        add_message_id(user_id, msg.message_id)

@dp.message(Command("food"))
async def cmd_food(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ç–∞–Ω–∏—é –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    profile = get_user_profile(user_id)
    if not profile:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        add_message_id(user_id, msg.message_id)
        return

    prompt = f"""
    –¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –°–æ–∑–¥–∞–π –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ–Ω—é –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
    - –ò–º—è: {profile['name']}
    - –ü–æ–ª: {profile['gender']}
    - –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}
    - –í–µ—Å: {profile['weight']} –∫–≥
    - –†–æ—Å—Ç: {profile['height']} —Å–º
    - –¶–µ–ª—å: {profile['goal']}
    - –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ—Ç
    - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –∑–¥–æ—Ä–æ–≤–∞—è, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∏—â–∞
    –í–µ—Ä–Ω–∏ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –≤ –≤–∏–¥–µ: –ó–∞–≤—Ç—Ä–∞–∫, –û–±–µ–¥, –£–∂–∏–Ω, –ü–µ—Ä–µ–∫—É—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª—é–¥ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.
    """

    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API (–ø–∏—Ç–∞–Ω–∏–µ)...") # –õ–æ–≥
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3000
        )
        print("–û—Ç–≤–µ—Ç –æ—Ç API (–ø–∏—Ç–∞–Ω–∏–µ) –ø–æ–ª—É—á–µ–Ω") # –õ–æ–≥
        food_plan = response.choices[0].message.content
        msg = await message.answer(f"<b>–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{food_plan}")
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è: {e}") # –õ–æ–≥
        msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        add_message_id(user_id, msg.message_id)

@dp.message(Command("progress"))
async def cmd_progress(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    text = message.text.split()
    if len(text) != 2:
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /progress <–≤–µ—Å>")
        add_message_id(user_id, msg.message_id)
        return

    try:
        weight = float(text[1].replace(',', '.'))
        if not (30 <= weight <= 300):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å")
    except ValueError:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).")
        add_message_id(user_id, msg.message_id)
        return

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cur.execute("INSERT INTO progress (user_id, weight, date) VALUES (?, ?, ?)", (user_id, weight, now))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–µ—Å –≤ –Ω–æ—Ä–º–µ")
    profile = get_user_profile(user_id)
    if profile:
        height_m = profile['height'] / 100
        bmi = weight / (height_m ** 2)
        if 18.5 <= bmi <= 24.9:
            cur.execute("SELECT id FROM achievements WHERE user_id = ? AND title = ?", (user_id, "–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞"))
            if cur.fetchone() is None:
                add_achievement(user_id, "–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞", "BMI –≤ –Ω–æ—Ä–º–µ!")

    msg = await message.answer(f"–í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω. –î–∞—Ç–∞: {now.split()[0]}")
    add_message_id(user_id, msg.message_id)

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    profile = get_user_profile(user_id)
    if not profile:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        add_message_id(user_id, msg.message_id)
        return

    sub_end = None
    cur.execute("SELECT subscription_end_date FROM users WHERE id = ?", (user_id,))
    sub_result = cur.fetchone()
    if sub_result and sub_result[0]:
        sub_end = datetime.fromisoformat(sub_result[0])

    days_left = get_trial_days_left(user_id)
    sub_info = ""
    if sub_end:
        sub_info = f"\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end.strftime('%d.%m.%Y')}"
    if days_left > 0:
        sub_info += f"\n(–∏–∑ –Ω–∏—Ö {days_left} –¥–Ω–µ–π ‚Äî –ø—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è)"

    msg = await message.answer(f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
                         f"–ò–º—è: {profile['name']}\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
                         f"–ü–æ–ª: {profile['gender']}\n"
                         f"–í–µ—Å: {profile['weight']} –∫–≥\n"
                         f"–†–æ—Å—Ç: {profile['height']} —Å–º\n"
                         f"–¶–µ–ª—å: {profile['goal']}\n"
                         f"–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {profile['training_location']}\n"
                         f"–£—Ä–æ–≤–µ–Ω—å: {profile['level']}{sub_info}")
    add_message_id(user_id, msg.message_id)

@dp.message(Command("achievements"))
async def cmd_achievements(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    cur.execute("SELECT title, description, unlocked_date FROM achievements WHERE user_id = ?", (user_id,))
    achs = cur.fetchall()

    if not achs:
        msg = await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        add_message_id(user_id, msg.message_id)
        return

    ach_text = "<b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    for title, desc, date in achs:
        ach_text += f"üèÜ <b>{title}</b>\n<i>{desc}</i>\n–î–∞—Ç–∞: {date[:10]}\n\n"

    msg = await message.answer(ach_text)
    add_message_id(user_id, msg.message_id)

# --- –ß–∞—Ç —Å –ò–ò ---
@dp.message(Command("chat"))
async def cmd_chat(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É —Å –ò–ò –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    profile = get_user_profile(user_id)
    if not profile:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        add_message_id(user_id, msg.message_id)
        return

    prompt = f"–¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å. –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {profile['name']}, –ü–æ–ª: {profile['gender']}, –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}, –í–µ—Å: {profile['weight']} –∫–≥, –†–æ—Å—Ç: {profile['height']} —Å–º, –¶–µ–ª—å: {profile['goal']}, –ú–µ—Å—Ç–æ: {profile['training_location']}, –£—Ä–æ–≤–µ–Ω—å: {profile['level']}. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message.text[6:]}" # [6:] —É–±–∏—Ä–∞–µ—Ç "/chat "

    try:
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500
        )
        ai_response = response.choices[0].message.content
        msg = await message.answer(ai_response)
        add_message_id(user_id, msg.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ò–ò: {e}")
        msg = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        add_message_id(user_id, msg.message_id)

# --- –ê–Ω–∞–ª–∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞ ---
@dp.message(Command("analyze_food"))
async def cmd_analyze_food(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–∏—Ç–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    food_description = message.text[14:] # –£–±–∏—Ä–∞–µ–º "/analyze_food "
    if not food_description.strip():
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /analyze_food <–æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã>")
        add_message_id(user_id, msg.message_id)
        return

    profile = get_user_profile(user_id)
    prompt = f"""
    –¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Ç–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: "{food_description}".
    –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {profile['name']}, –ü–æ–ª: {profile['gender']}, –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}, –í–µ—Å: {profile['weight']} –∫–≥, –†–æ—Å—Ç: {profile['height']} —Å–º, –¶–µ–ª—å: {profile['goal']}.
    –û—Ü–µ–Ω–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ). –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """

    try:
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500
        )
        analysis = response.choices[0].message.content
        msg = await message.answer(f"<b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞:</b>\n\n{analysis}")
        add_message_id(user_id, msg.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Ü–∏–æ–Ω–∞: {e}")
        msg = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Ü–∏–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        add_message_id(user_id, msg.message_id)

# --- –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
@dp.message(Command("graph"))
async def cmd_graph(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä–∞—Ñ–∏–∫—É –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    cur.execute("SELECT date, weight FROM progress WHERE user_id = ? ORDER BY date ASC", (user_id,))
    data = cur.fetchall()

    if not data:
        msg = await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –î–æ–±–∞–≤—å—Ç–µ –≤–µ—Å —Å –ø–æ–º–æ—â—å—é /progress.")
        add_message_id(user_id, msg.message_id)
        return

    dates = [datetime.fromisoformat(d[0]) for d in data]
    weights = [d[1] for d in data]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, weights, marker='o')
    plt.title(f'–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–í–µ—Å (–∫–≥)')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    img_buffer.seek(0)
    plt.close() # –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

    input_file = BufferedInputFile(img_buffer.getvalue(), filename='progress_graph.png')
    msg = await message.answer_document(input_file)
    add_message_id(user_id, msg.message_id)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(Command("set_reminder_time"))
async def cmd_set_reminder_time(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        msg = await message.answer("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        add_message_id(user_id, msg.message_id)
        return

    text = message.text.split()
    if len(text) != 2:
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /set_reminder_time HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)")
        add_message_id(user_id, msg.message_id)
        return

    time_str = text[1]
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(time_str, "%H:%M")
        reminder_times[user_id] = time_str
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            scheduler.remove_job(job_id=f"remind_{user_id}", jobstore='default')
        except:
            pass
        hour, minute = map(int, time_str.split(':'))
        scheduler.add_job(remind_workout, "cron", hour=hour, minute=minute, id=f"remind_{user_id}", args=[user_id])
        msg = await message.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.")
        add_message_id(user_id, msg.message_id)
    except ValueError:
        msg = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00).")
        add_message_id(user_id, msg.message_id)

async def remind_workout(user_id):
    try:
        await bot.send_message(user_id, "–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ /training –∏ /food —Å–µ–≥–æ–¥–Ω—è!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- Callback –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
@dp.callback_query(lambda c: c.data.startswith('training_completed_'))
async def training_completed_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    date_str = callback_query.data.split('_')[-1] # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ 'completed'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º UPDATE —Å WHERE –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("UPDATE training_logs SET status = 'completed' WHERE user_id = ? AND date = ?", (user_id, date_str))
    conn.commit()

    await callback_query.message.edit_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {date_str} –∑–∞—Å—á–∏—Ç–∞–Ω–∞.")
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('training_later_'))
async def training_later_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    date_str = callback_query.data.split('_')[-1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ 'skipped'
    cur.execute("UPDATE training_logs SET status = 'skipped' WHERE user_id = ? AND date = ?", (user_id, date_str))
    conn.commit()

    await callback_query.message.edit_text(f"–ü–æ–Ω—è–ª, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ {date_str} –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ.")
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω–∫–µ—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥) ---
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message.text}") # –õ–æ–≥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text and message.text.startswith('/'):
        print(f"–ö–æ–º–∞–Ω–¥–∞ '{message.text}' ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç") # –õ–æ–≥
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º await, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º ‚Äî –ø—É—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–º–∞–Ω–¥—É
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É
    if user_id in user_states and 'step' in user_states[user_id]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∏–¥—ë—Ç –≤ process_profile
        pass # –≠—Ç–æ –º–µ—Å—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ process_profile –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –∞–Ω–∫–µ—Ç–µ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        pass


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    global loop # <-- –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    loop = asyncio.get_running_loop() # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª

    # --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    scheduler.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"üì° –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return # –í—ã–π—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫

    # --- –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
    def run_flask():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º waitress –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        from waitress import serve
        logger.info("üåê Flask (Waitress) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 0.0.0.0:8000...")
        serve(app, host='0.0.0.0', port=8000)

    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    flask_thread.start()
    logger.info("üßµ –ü–æ—Ç–æ–∫ Flask –∑–∞–ø—É—â–µ–Ω")

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # --- –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---
    # –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –∏ asyncio –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        while True:
            await asyncio.sleep(1) # –£—Å—Ç—É–ø–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ waitress —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        import waitress
    except ImportError:
        logger.critical("‚ùå –ú–æ–¥—É–ª—å 'waitress' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install waitress")
        exit(1)

    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)

# --- Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ---
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ, —á—Ç–æ –∏ async def main() –≤—ã—à–µ
app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    json_data = request.get_json()
    if not json_data:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π webhook –∑–∞–ø—Ä–æ—Å")
        return 'Bad Request: No JSON data', 400

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç Update
        update = types.Update.model_validate(json_data)
        # –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        # –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ `Dispatcher` –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        # –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö, –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `asyncio.run()` –≤–Ω—É—Ç—Ä–∏,
        # –Ω–æ –ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º asyncio-—Ü–∏–∫–ª–µ.
        # –û–¥–Ω–∞–∫–æ, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –º—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.
        # asyncio.create_task() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ Flask,
        # –Ω–æ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loop.call_soon_threadsafe
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ asyncio
        asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), loop)
        logger.debug(f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", exc_info=True)
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 500, —á—Ç–æ–±—ã Telegram –Ω–µ —Å—á–∏—Ç–∞–ª —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
        # –∏ –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        return 'Internal Server Error', 500 

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –∑–Ω–∞–ª, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
    return 'OK', 200

