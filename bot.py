import json
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, LabeledPrice
from openai import OpenAI
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import matplotlib.pyplot as plt
import io
import hashlib
from urllib.parse import urlencode
from flask import Flask, request, render_template, redirect, url_for, session
import threading
import os
import logging
import traceback
import re # <-- –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ /set_reminder_time

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ---
try:
    from config import API_TOKEN, OPENROUTER_API_KEY, YOOMONEY_SHOP_ID, YOOMONEY_SECRET_KEY, WEBHOOK_URL, ADMIN_PASSWORD, ADMIN_IDS
except ImportError:
    print("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.")
    exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- OpenAI –∫–ª–∏–µ–Ω—Ç ---
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ base_url
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url='https://openrouter.ai/api/v1/'  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
)

# –ù–û–í–û–ï: –ú–æ–¥–µ–ª—å Qwen
MODEL = "qwen/qwen2.5-vl-72b-instruct:free" # <-- –ò–∑–º–µ–Ω–µ–Ω–æ

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite ---
conn = sqlite3.connect('trainer_bot.db', check_same_thread=False)
cur = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    user_id INTEGER UNIQUE,
    name TEXT,
    age INTEGER,
    gender TEXT,
    height INTEGER,
    weight REAL,
    goal TEXT,
    training_location TEXT,
    level TEXT,
    last_training_date TIMESTAMP,
    next_training_date TIMESTAMP,
    reminder_time TEXT DEFAULT '08:00',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    trial_granted BOOLEAN DEFAULT 0 -- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–±–Ω–∏–∫–∞
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS weights (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    weight REAL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS trainings (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    content TEXT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending',  -- 'pending', 'completed', 'missed'
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
""")

# --- –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã ---
cur.execute("""
CREATE TABLE IF NOT EXISTS progress (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    weight REAL,
    chest REAL,
    waist REAL,
    hips REAL,
    arms REAL,
    shoulders REAL,
    thighs REAL,
    calves REAL,
    squat REAL,
    bench REAL,
    deadlift REAL,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS achievements (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    name TEXT,
    date_achieved TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS training_schedule (
    id INTEGER PRIMARY KEY,
    user_id INTEGER UNIQUE,
    schedule TEXT, -- JSON —Å—Ç—Ä–æ–∫–∞: {"days_per_week": 3, "days": ["Mon", "Wed", "Fri"]}
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    id INTEGER PRIMARY KEY,
    user_id INTEGER UNIQUE,
    expires_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
""")
conn.commit()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_states = {}  # {user_id: {"step": "name", "data": {...}}}
scheduler = AsyncIOScheduler()
reminder_times = {} # {user_id: time_str}
loop = None # <-- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è asyncio —Ü–∏–∫–ª–∞

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def save_user_profile(user_id, profile):
    cur.execute("""
        INSERT OR REPLACE INTO users (user_id, name, age, gender, height, weight, goal, training_location, level)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, profile['name'], profile['age'], profile['gender'], profile['height'], profile['weight'], profile['goal'], profile.get('training_location', ''), profile.get('level', '')))
    conn.commit()

def save_weight(user_id, weight):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É weights."""
    cur.execute("INSERT INTO weights (user_id, weight) VALUES (?, ?)", (user_id, weight))
    conn.commit()

def get_weights(user_id):
    cur.execute("SELECT weight, date FROM weights WHERE user_id = ? ORDER BY date", (user_id,))
    return cur.fetchall()

def get_user_profile(user_id):
    cur.execute("SELECT name, age, gender, height, weight, goal, training_location, level, next_training_date, reminder_time FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if row:
        return {
            "name": row[0],
            "age": row[1],
            "gender": row[2],
            "height": row[3],
            "weight": row[4],
            "goal": row[5],
            "training_location": row[6],
            "level": row[7],
            "next_training_date": row[8],
            "reminder_time": row[9]
        }
    return None

def is_subscribed(user_id):
    cur.execute("SELECT expires_at FROM subscriptions WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if row:
        expires_at = datetime.fromisoformat(row[0])
        return datetime.now() < expires_at
    return False

def add_subscription(user_id, months=1):
    expires_at = datetime.now() + timedelta(days=30 * months)
    cur.execute("""
        INSERT OR REPLACE INTO subscriptions (user_id, expires_at)
        VALUES (?, ?)
    """, (user_id, expires_at.isoformat()))
    conn.commit()

# –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –æ–ø–ª–∞—Ç–∞)
def grant_subscription(user_id, days=7):
    expires_at = datetime.now() + timedelta(days=days)
    cur.execute("""
        INSERT OR REPLACE INTO subscriptions (user_id, expires_at)
        VALUES (?, ?)
    """, (user_id, expires_at.isoformat()))
    conn.commit()
    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª –≤—ã–¥–∞–Ω
    cur.execute("UPDATE users SET trial_granted = 1 WHERE user_id = ?", (user_id,))
    conn.commit()

def add_message_id(user_id, msg_id):
    if user_id not in user_states:
        user_states[user_id] = {"messages": []}
    user_states[user_id]["messages"].append(msg_id)

async def delete_old_messages(user_id, keep_last=3):
    if user_id in user_states and "messages" in user_states[user_id]:
        messages = user_states[user_id]["messages"]
        if len(messages) > keep_last:
            to_delete = messages[:-keep_last]
            user_states[user_id]["messages"] = messages[-keep_last:]
            for msg_id in to_delete:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception:
                    pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
def check_achievements(user_id):
    # "–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    cur.execute("SELECT COUNT(*) FROM trainings WHERE user_id = ? AND status = 'completed'", (user_id,))
    completed_count = cur.fetchone()[0]
    if completed_count == 1:
        cur.execute("INSERT OR IGNORE INTO achievements (user_id, name) VALUES (?, ?)", (user_id, "–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"))
        conn.commit()

    # "–ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤"
    now = datetime.now()
    week_ago = now - timedelta(days=7)
    cur.execute("""
        SELECT COUNT(*) FROM trainings
        WHERE user_id = ? AND status = 'completed' AND date >= ?
    """, (user_id, week_ago.isoformat()))
    week_completed = cur.fetchone()[0]
    if week_completed >= 7:
        cur.execute("INSERT OR IGNORE INTO achievements (user_id, name) VALUES (?, ?)", (user_id, "–ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤"))
        conn.commit()

    # "–ü–æ—Ö—É–¥–µ–ª –Ω–∞ 5 –∫–≥"
    cur.execute("""
        SELECT weight FROM weights WHERE user_id = ? ORDER BY date ASC LIMIT 1
    """, (user_id,))
    first_weight_row = cur.fetchone()
    if first_weight_row:
        first_weight = first_weight_row[0]
        cur.execute("""
            SELECT weight FROM weights WHERE user_id = ? ORDER BY date DESC LIMIT 1
        """, (user_id,))
        latest_weight_row = cur.fetchone()
        if latest_weight_row:
            latest_weight = latest_weight_row[0]
            if first_weight - latest_weight >= 5:
                cur.execute("INSERT OR IGNORE INTO achievements (user_id, name) VALUES (?, ?)", (user_id, "–ü–æ—Ö—É–¥–µ–ª –Ω–∞ 5 –∫–≥"))
                conn.commit()

# --- –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ @dp.message() ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–Ω–æ–≤–æ
    user_states[user_id] = {"step": "name", "data": {}, "messages": []}
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_old_messages(user_id, keep_last=0)
    msg = await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä üí™\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    add_message_id(user_id, msg.message_id)

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
        msg = await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        add_message_id(user_id, msg.message_id)
    else:
        msg = await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.")
        add_message_id(user_id, msg.message_id)

# --- YooKassa –æ–ø–ª–∞—Ç–∞ ---
@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–∏–º–µ—Ä—ã —Ü–µ–Ω (–≤ –∫–æ–ø–µ–π–∫–∞—Ö: 149.00 —Ä—É–± = 14900 –∫–æ–ø)
    prices = [
        LabeledPrice(label='1 –º–µ—Å—è—Ü', amount=14900),
        # LabeledPrice(label='–°–∫–∏–¥–∫–∞', amount=-14900), # –ü—Ä–∏–º–µ—Ä —Å–∫–∏–¥–∫–∏, —É–±–µ—Ä–∏, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
        # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç
    await bot.send_invoice(
        user_id=user_id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        description="–î–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –ø–∏—Ç–∞–Ω–∏—é –Ω–∞ 30 –¥–Ω–µ–π",
        payload="subscribe_1_month", # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        provider_token=YOOKASSA_PROVIDER_TOKEN, # –¢–æ–∫–µ–Ω –æ—Ç YooKassa
        currency="RUB",
        prices=prices,
        start_parameter="subscribe", # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è deep-linking
        # photo_url="https://example.com/subscription_image.jpg", # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        # photo_size=64,
        # photo_width=800,
        # photo_height=450,
        # need_email=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        # send_email_to_provider=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        is_flexible=False # True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏)
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å *–ø–æ—Å–ª–µ* –∏–ª–∏ *–≤–º–µ—Å—Ç–æ* —Å—á—ë—Ç–∞
    oferta_url = "https://docs.google.com/document/d/14NrOTKOJ2Dcd5-guVZGU7fRj9gj-wS1X/edit?usp=drive_link&ouid=111319375229341079989&rtpof=true&sd=true"
    msg = await message.answer(f"–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã: {oferta_url}")
    add_message_id(user_id, msg.message_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å YooKassa) ---
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–¥—Ä–µ—Å/–¥–æ—Å—Ç–∞–≤–∫—É
    await pre_checkout_query.answer(ok=True)

@dp.message(lambda m: m.content_type == 'successful_payment')
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    # –û—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ)
    add_subscription(user_id, 1)
    msg = await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ 1 –º–µ—Å—è—Ü.")
    add_message_id(user_id, msg.message_id)

@dp.message(Command("training"))
async def send_training(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /training –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    user = get_user_profile(user_id)
    if not user:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É: /start")
        add_message_id(user_id, msg.message_id)
        return

    if not is_subscribed(user_id):
        msg = await message.answer("üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /subscribe, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å.")
        add_message_id(user_id, msg.message_id)
        return

    # --- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
    # –ë–µ—Ä—ë–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    cur.execute("""
        SELECT status FROM trainings
        WHERE user_id = ? ORDER BY date DESC LIMIT 5
    """, (user_id,))
    recent_trainings = cur.fetchall()
    recent_statuses = [t[0] for t in recent_trainings]

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    completed_count = recent_statuses.count('completed')
    if completed_count < 3:
        difficulty = "–ª—ë–≥–∫–∏–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
    else:
        difficulty = "—Å—Ä–µ–¥–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"

    try:
        completion = client.chat.completions.create(
            model=MODEL, # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            messages=[
                {"role": "system", "content": f"""
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –°–æ—Å—Ç–∞–≤—å **–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å** –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

- –ò–º—è: {user['name']}
- –ü–æ–ª: {user['gender']}
- –í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç
- –†–æ—Å—Ç: {user['height']} —Å–º
- –í–µ—Å: {user['weight']} –∫–≥
- –¶–µ–ª—å: {user['goal']}
- –ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {user['training_location'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –£—Ä–æ–≤–µ–Ω—å: {user['level'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}

–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å **–±–µ–∑–æ–ø–∞—Å–Ω–æ–π**, **—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π**, **—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π** –∏ **–ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞**.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
- –ü–æ–¥—Ö–æ–¥—ã: [—á–∏—Å–ª–æ]
- –ü–æ–≤—Ç–æ—Ä—ã: [—á–∏—Å–ª–æ]
- –í–µ—Å: [—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å –≤ –∫–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ]
- –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: [–µ—Å–ª–∏ –Ω—É–∂–Ω–æ]

–ü–∏—à–∏ –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**.
"""},  # –ù–æ–≤—ã–π –ø—Ä–æ–º—Ç
                {"role": "user", "content": "–°–æ–∑–¥–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."}
            ],
            max_tokens=3000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ
            temperature=0.7
        )
        training = completion.choices[0].message.content

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑—É
        cur.execute("INSERT INTO trainings (user_id, content) VALUES (?, ?)", (user_id, training))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data="training_completed")],
            [InlineKeyboardButton(text=" —Å–¥–µ–ª–∞—é –ø–æ–∑–∂–µ", callback_data="training_postpone")]
        ])
        msg = await message.answer(f"–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{training}", reply_markup=keyboard)
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        next_date = datetime.now() + timedelta(days=2)
        cur.execute("UPDATE users SET next_training_date = ? WHERE user_id = ?", (next_date.isoformat(), user_id))
        conn.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        msg = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        add_message_id(user_id, msg.message_id)

@dp.message(Command("food"))
async def send_food(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /food –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    user = get_user_profile(user_id)
    if not user:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É: /start")
        add_message_id(user_id, msg.message_id)
        return

    if not is_subscribed(user_id):
        msg = await message.answer("üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /subscribe, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å.")
        add_message_id(user_id, msg.message_id)
        return

    try:
        completion = client.chat.completions.create(
            model=MODEL, # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            messages=[
                {"role": "system", "content": f"""
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å **–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å** –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

- –ò–º—è: {user['name']}
- –ü–æ–ª: {user['gender']}
- –í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç
- –†–æ—Å—Ç: {user['height']} —Å–º
- –í–µ—Å: {user['weight']} –∫–≥
- –¶–µ–ª—å: {user['goal']}
- –ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {user['training_location'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –£—Ä–æ–≤–µ–Ω—å: {user['level'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
- –ü–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–º
- –ü–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –ø–æ–ª—É

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ó–∞–≤—Ç—Ä–∞–∫: [–æ–ø–∏—Å–∞–Ω–∏–µ]
- –ü–µ—Ä–µ–∫—É—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ): [–æ–ø–∏—Å–∞–Ω–∏–µ]
- –û–±–µ–¥: [–æ–ø–∏—Å–∞–Ω–∏–µ]
- –ü–µ—Ä–µ–∫—É—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ): [–æ–ø–∏—Å–∞–Ω–∏–µ]
- –£–∂–∏–Ω: [–æ–ø–∏—Å–∞–Ω–∏–µ]
- –ü–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏: [–µ—Å–ª–∏ –Ω—É–∂–Ω–æ]

–ü–∏—à–∏ –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**.
"""},  # –ù–æ–≤—ã–π –ø—Ä–æ–º—Ç
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –ø–∏—Ç–∞–Ω–∏–µ."}
            ],
            max_tokens=3000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ
            temperature=0.7
        )
        food = completion.choices[0].message.content
        msg = await message.answer(f"–¢–≤–æ—ë –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{food}")
        add_message_id(user_id, msg.message_id)
        await delete_old_messages(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        msg = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        add_message_id(user_id, msg.message_id)

# --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ ---
@dp.message(Command("weight"))
async def cmd_weight(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 2:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if len(args) == 1:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /weight 70.5")
        else:
            msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /weight 70.5")
        add_message_id(user_id, msg.message_id)
        return
    try:
        weight = float(args[1])
        save_weight(user_id, weight)
        msg = await message.answer(f"–í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        add_message_id(user_id, msg.message_id)
    except ValueError:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        add_message_id(user_id, msg.message_id)

# --- –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

# --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ ---
@dp.message(Command("progress"))
async def cmd_progress(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) < 2:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if len(args) == 1:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /progress 70.5")
        else:
            msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/progress 70.5 (–≤–µ—Å –≤ –∫–≥)")
        add_message_id(user_id, msg.message_id)
        return

    try:
        weight = float(args[1])
        save_weight(user_id, weight)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ progress
        cur.execute("""
            INSERT INTO progress (user_id, weight) VALUES (?, ?)
        """, (user_id, weight))
        conn.commit()

        msg = await message.answer(f"‚úÖ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å.")
        add_message_id(user_id, msg.message_id)

        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        check_achievements(user_id)

    except ValueError:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        add_message_id(user_id, msg.message_id)

@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="schedule_3")],
        [InlineKeyboardButton(text="4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="schedule_4")],
        [InlineKeyboardButton(text="5 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="schedule_5")]
    ])
    msg = await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —Ö–æ—á–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?", reply_markup=keyboard)
    add_message_id(user_id, msg.message_id)

@dp.message(Command("report"))
async def cmd_report(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–∏–º–µ—Ä: –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    now = datetime.now()
    week_ago = now - timedelta(days=7)

    # –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é
    cur.execute("""
        SELECT COUNT(*) FROM trainings
        WHERE user_id = ? AND status = 'completed' AND date >= ?
    """, (user_id, week_ago.isoformat()))
    completed_count = cur.fetchone()[0]

    # –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
    cur.execute("""
        SELECT COUNT(*) FROM trainings
        WHERE user_id = ? AND status = 'missed' AND date >= ?
    """, (user_id, week_ago.isoformat()))
    missed_count = cur.fetchone()[0]

    report = f"""
üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {completed_count}
- –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {missed_count}
    """

    msg = await message.answer(report)
    add_message_id(user_id, msg.message_id)

@dp.message(Command("achievements"))
async def cmd_achievements(message: types.Message):
    user_id = message.from_user.id
    cur.execute("SELECT name, date_achieved FROM achievements WHERE user_id = ?", (user_id,))
    rows = cur.fetchall()

    if not rows:
        msg = await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
    else:
        ach_list = "\n".join([f"üèÜ {name} ‚Äî {date.split()[0]}" for name, date in rows])
        msg = await message.answer(f"–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n{ach_list}")

    add_message_id(user_id, msg.message_id)

# --- –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∞—Ç –¥–∞—Ç ---
@dp.message(Command("profile"))
async def show_profile(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    user = get_user_profile(user_id)
    if not user:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É: /start")
        add_message_id(user_id, msg.message_id)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    sub_status = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
    cur.execute("SELECT expires_at FROM subscriptions WHERE user_id = ?", (user_id,))
    sub_row = cur.fetchone()
    if sub_row:
        try:
            expires_at_dt = datetime.fromisoformat(sub_row[0])
            sub_status = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_at_dt.strftime('%d.%m.%Y')}"
        except ValueError:
            sub_status = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub_row[0]}"

    weights = get_weights(user_id)
    weights_str = "\n".join([f"{w[1].split()[0]}: {w[0]} –∫–≥" for w in weights[-5:]])

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    cur.execute("SELECT schedule FROM training_schedule WHERE user_id = ?", (user_id,))
    sched_row = cur.fetchone()
    schedule_info = sched_row[0] if sched_row else "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    cur.execute("SELECT name FROM achievements WHERE user_id = ?", (user_id,))
    ach_rows = cur.fetchall()
    achievements_list = ", ".join([a[0] for a in ach_rows]) if ach_rows else "–Ω–µ—Ç"

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
    next_training_date_str = user['next_training_date']
    if next_training_date_str:
        try:
            next_dt = datetime.fromisoformat(next_training_date_str)
            formatted_next_date = next_dt.strftime('%d.%m.%Y')
        except ValueError:
            formatted_next_date = next_training_date_str # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    else:
        formatted_next_date = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

    profile = (
        f"–ò–º—è: {user['name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
        f"–ü–æ–ª: {user['gender']}\n"
        f"–†–æ—Å—Ç: {user['height']} —Å–º\n"
        f"–í–µ—Å: {user['weight']} –∫–≥\n"
        f"–¶–µ–ª—å: {user['goal']}\n"
        f"–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {user['training_location'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {user['level'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {formatted_next_date}\n" # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
        f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {user['reminder_time']}\n"
        f"–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {schedule_info}\n"
        f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {achievements_list}\n"
        f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_status}\n" # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
        f"–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞:\n{weights_str if weights else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )
    msg = await message.answer(profile)
    add_message_id(user_id, msg.message_id)

@dp.message(Command("weight_graph"))
async def send_weight_graph(message: types.Message):
    user_id = message.from_user.id
    weights = get_weights(user_id)

    if not weights:
        msg = await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ.")
        add_message_id(user_id, msg.message_id)
        return

    dates = [w[1].split()[0] for w in weights]
    values = [w[0] for w in weights]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, values, marker='o')
    plt.title("–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–í–µ—Å (–∫–≥)")
    plt.xticks(rotation=45)
    plt.tight_layout()

    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plt.close()

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º BytesIO –≤ BufferedInputFile
    photo = BufferedInputFile(img.read(), filename='weight_graph.png')
    msg = await message.answer_photo(photo=photo)
    add_message_id(user_id, msg.message_id)

# --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è ---
@dp.message(Command("set_reminder_time"))
async def cmd_set_reminder_time(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 2:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if len(args) == 1:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /set_reminder_time 19:00")
        else:
            msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /set_reminder_time HH:MM")
        add_message_id(user_id, msg.message_id)
        return

    time_str = args[1]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç HH:MM
    if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
        msg = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00).")
        add_message_id(user_id, msg.message_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤ —Å—Ç–æ–ª–±–µ—Ü reminder_time –≤ —Ç–∞–±–ª–∏—Ü–µ users)
    cur.execute("UPDATE users SET reminder_time = ? WHERE user_id = ?", (time_str, user_id))
    conn.commit()
    msg = await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.")
    add_message_id(user_id, msg.message_id)

# --- Callback-—ã ---

@dp.callback_query(lambda c: c.data.startswith("gender_"))
async def process_gender_callback(callback_query: types.CallbackQuery):
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")  # –õ–æ–≥
    user_id = callback_query.from_user.id
    if user_id not in user_states:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∞–Ω–∫–µ—Ç—É: /start")
        return

    state = user_states[user_id]
    if state["step"] != "gender":
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–æ—Ç —ç—Ç–∞–ø –∞–Ω–∫–µ—Ç—ã.")
        return

    gender = "–º—É–∂—Å–∫–æ–π" if callback_query.data == "gender_male" else "–∂–µ–Ω—Å–∫–∏–π"
    state["data"]["gender"] = gender
    state["step"] = "height"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_old_messages(user_id, keep_last=0)
    msg = await callback_query.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç? (–≤ —Å–º)")
    add_message_id(user_id, msg.message_id)

@dp.callback_query(lambda c: c.data.startswith("goal_"))
async def process_goal_callback(callback_query: types.CallbackQuery):
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")  # –õ–æ–≥
    user_id = callback_query.from_user.id
    if user_id not in user_states:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∞–Ω–∫–µ—Ç—É: /start")
        return

    state = user_states[user_id]
    if state["step"] != "goal":
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–æ—Ç —ç—Ç–∞–ø –∞–Ω–∫–µ—Ç—ã.")
        return

    goal_map = {
        "goal_lose_weight": "–ø–æ—Ö—É–¥–µ—Ç—å",
        "goal_gain_muscle": "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É",
        "goal_maintain": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å"
    }
    goal = goal_map[callback_query.data]
    state["data"]["goal"] = goal

    # –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    state["step"] = "training_location"
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_old_messages(user_id, keep_last=0)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –î–æ–º (–±–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)", callback_data="location_home_basic")],
        [InlineKeyboardButton(text="üèãÔ∏è –î–æ–º + –≥–∞–Ω—Ç–µ–ª–∏", callback_data="location_home_weights")],
        [InlineKeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ª", callback_data="location_gym")],
        [InlineKeyboardButton(text="üåø –£–ª–∏—Ü–∞", callback_data="location_outdoor")]
    ])
    msg = await callback_query.message.edit_text("–ì–¥–µ —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?", reply_markup=keyboard)
    add_message_id(user_id, msg.message_id)

@dp.callback_query(lambda c: c.data.startswith("location_"))
async def process_location_callback(callback_query: types.CallbackQuery):
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")  # –õ–æ–≥
    user_id = callback_query.from_user.id
    if user_id not in user_states:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∞–Ω–∫–µ—Ç—É: /start")
        return

    state = user_states[user_id]
    if state["step"] != "training_location":
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–æ—Ç —ç—Ç–∞–ø –∞–Ω–∫–µ—Ç—ã.")
        return

    location_map = {
        "location_home_basic": "–¥–æ–º (–±–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)",
        "location_home_weights": "–¥–æ–º + –≥–∞–Ω—Ç–µ–ª–∏",
        "location_gym": "–∑–∞–ª",
        "location_outdoor": "—É–ª–∏—Ü–∞"
    }
    location = location_map[callback_query.data]
    state["data"]["training_location"] = location

    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {location}")  # –õ–æ–≥

    # –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è
    state["step"] = "level"
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_old_messages(user_id, keep_last=0)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå± –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
        [InlineKeyboardButton(text="‚ö° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
        [InlineKeyboardButton(text="üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
    ])
    msg = await callback_query.message.edit_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å?", reply_markup=keyboard)
    add_message_id(user_id, msg.message_id)

@dp.callback_query(lambda c: c.data.startswith("level_"))
async def process_level_callback(callback_query: types.CallbackQuery):
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")  # –õ–æ–≥
    user_id = callback_query.from_user.id
    if user_id not in user_states:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∞–Ω–∫–µ—Ç—É: /start")
        return

    state = user_states[user_id]
    if state["step"] != "level":
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–æ—Ç —ç—Ç–∞–ø –∞–Ω–∫–µ—Ç—ã.")
        return

    level_map = {
        "level_beginner": "–Ω–æ–≤–∏—á–æ–∫",
        "level_intermediate": "—Å—Ä–µ–¥–Ω–∏–π",
        "level_advanced": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    }
    level = level_map[callback_query.data]
    state["data"]["level"] = level

    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {level}")  # –õ–æ–≥

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = state["data"]
    save_user_profile(user_id, profile)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_states[user_id]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_old_messages(user_id, keep_last=0)
    msg = await callback_query.message.edit_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {profile['name']}! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "/training ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/food ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ\n"
        "/subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    )
    add_message_id(user_id, msg.message_id)

@dp.callback_query(lambda c: c.data == "training_completed")
async def training_completed_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º ID —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π "pending" —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    cur.execute("""
        SELECT id FROM trainings
        WHERE user_id = ? AND status = 'pending'
        ORDER BY date DESC
        LIMIT 1
    """, (user_id,))
    row = cur.fetchone()

    if row:
        training_id = row[0]
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cur.execute("UPDATE trainings SET status = 'completed' WHERE id = ?", (training_id,))
        conn.commit()
        await callback_query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞.")
        check_achievements(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    else:
        await callback_query.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)

    await callback_query.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

@dp.callback_query(lambda c: c.data == "training_postpone")
async def training_postpone_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ +1 –¥–µ–Ω—å
    next_date = datetime.now() + timedelta(days=1)
    cur.execute("UPDATE users SET next_training_date = ? WHERE user_id = ?", (next_date.isoformat(), user_id))
    conn.commit()
    await callback_query.answer("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
    await callback_query.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

# --- –ò–ó–ú–ï–ù–ï–ù–û: –†—É—Å—Å–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
@dp.callback_query(lambda c: c.data.startswith("schedule_"))
async def process_schedule_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    schedule_map = {
        "schedule_3": {"days_per_week": 3, "days": ["Mon", "Wed", "Fri"]},
        "schedule_4": {"days_per_week": 4, "days": ["Mon", "Tue", "Thu", "Sat"]},
        "schedule_5": {"days_per_week": 5, "days": ["Mon", "Tue", "Wed", "Thu", "Fri"]}
    }
    schedule_key = callback_query.data
    schedule_data = schedule_map.get(schedule_key)
    if schedule_data: # <-- –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ–π
        import json
        cur.execute("INSERT OR REPLACE INTO training_schedule (user_id, schedule) VALUES (?, ?)", (user_id, json.dumps(schedule_data)))
        conn.commit()
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –†—É—Å—Å–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        day_map = {
            "Mon": "–ü–Ω",
            "Tue": "–í—Ç",
            "Wed": "–°—Ä",
            "Thu": "–ß—Ç",
            "Fri": "–ü—Ç",
            "Sat": "–°–±",
            "Sun": "–í—Å"
        }
        russian_days = [day_map.get(day, day) for day in schedule_data['days']] # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–Ω–∏
        await callback_query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫: {schedule_data['days_per_week']} —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.")
        await callback_query.message.edit_text(f"–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫: {schedule_data['days_per_week']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é ({', '.join(russian_days)}).") # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –¥–Ω–∏
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
    await callback_query.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ!) ---

@dp.message()
async def handle_questionnaire(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message.text}")  # –õ–æ–≥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text and message.text.startswith('/'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ '{message.text}' ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç")  # –õ–æ–≥
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º await, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º ‚Äî –ø—É—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–º–∞–Ω–¥—É
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É
    if user_id in user_states:
        state = user_states[user_id]
        step = state["step"]
        data = state["data"]

        if step == "name":
            name = message.text.strip()
            if len(name) < 2:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
                add_message_id(user_id, msg.message_id)
                return
            data["name"] = name
            state["step"] = "age"
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await delete_old_messages(user_id, keep_last=0)
            msg = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
            add_message_id(user_id, msg.message_id)

        elif step == "age":
            try:
                age = int(message.text.strip())
                if age < 10 or age > 100:
                    msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100).")
                    add_message_id(user_id, msg.message_id)
                    return
                data["age"] = age
                state["step"] = "gender"
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await delete_old_messages(user_id, keep_last=0)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
                    [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
                ])
                msg = await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=keyboard)
                add_message_id(user_id, msg.message_id)
            except ValueError:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
                add_message_id(user_id, msg.message_id)

        elif step == "height":
            try:
                height = int(message.text.strip())
                if height < 100 or height > 250:
                    msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º (–æ—Ç 100 –¥–æ 250).")
                    add_message_id(user_id, msg.message_id)
                    return
                data["height"] = height
                state["step"] = "weight"
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await delete_old_messages(user_id, keep_last=0)
                msg = await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å? (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)")
                add_message_id(user_id, msg.message_id)
            except ValueError:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
                add_message_id(user_id, msg.message_id)

        elif step == "weight":
            try:
                weight = float(message.text.strip())
                if weight < 30 or weight > 300:
                    msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥).")
                    add_message_id(user_id, msg.message_id)
                    return
                data["weight"] = weight
                state["step"] = "goal"
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await delete_old_messages(user_id, keep_last=0)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_lose_weight")],
                    [InlineKeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="goal_gain_muscle")],
                    [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="goal_maintain")]
                ])
                msg = await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=keyboard)
                add_message_id(user_id, msg.message_id)
            except ValueError:
                msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π).")
                add_message_id(user_id, msg.message_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∞–Ω–∫–µ—Ç–µ –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    global loop # <-- –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    loop = asyncio.get_running_loop() # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª

    # --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    scheduler.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"üì° –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return

    # --- Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ---
    app = Flask(__name__)

    @app.route('/webhook', methods=['POST'])
    def webhook():
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = types.Update.model_validate_json(json_string)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º threadsafe –≤–µ—Ä—Å–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π loop
            asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), loop)
            return '', 200
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Content-Type")
            return '', 403

    # --- –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
    def run_flask():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º waitress –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        from waitress import serve
        logger.info("üåê Flask (Waitress) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 0.0.0.0:8000...")
        serve(app, host='0.0.0.0', port=8000)

    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    flask_thread.start()
    logger.info("üßµ –ü–æ—Ç–æ–∫ Flask –∑–∞–ø—É—â–µ–Ω")

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # --- –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---
    # –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –∏ asyncio –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        while True:
            await asyncio.sleep(1) # –£—Å—Ç—É–ø–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ waitress —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        import waitress
    except ImportError:
        logger.critical("‚ùå –ú–æ–¥—É–ª—å 'waitress' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install waitress")
        exit(1)

    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)