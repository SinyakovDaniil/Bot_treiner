import json
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from openai import OpenAI
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import matplotlib.pyplot as plt
import io
import hashlib
from urllib.parse import urlencode
from flask import Flask, request
import threading
import os
import logging

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ---
from config import API_TOKEN, OPENROUTER_API_KEY, ROBOKASSA_LOGIN, ROBOKASSA_PASS1, ROBOKASSA_PASS2, WEBHOOK_URL, ADMIN_PASSWORD

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- OpenAI –∫–ª–∏–µ–Ω—Ç ---
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url='https://openrouter.ai/api/v1/' # –í–∞–∂–Ω–æ: —Å–æ —Å–ª—ç—à–µ–º –≤ –∫–æ–Ω—Ü–µ
)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite ---
conn = sqlite3.connect('trainer_bot.db', check_same_thread=False)
cur = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT,
    age INTEGER,
    weight REAL,
    height REAL,
    goal TEXT,
    subscription_end_date TEXT DEFAULT NULL,
    trial_used BOOLEAN DEFAULT FALSE,
    last_weight_entry TEXT DEFAULT NULL
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS progress (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    weight REAL,
    date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS achievements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    description TEXT,
    unlocked_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
""")

conn.commit()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_states = {}
scheduler = AsyncIOScheduler()
reminder_times = {} # {user_id: time_str}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_user_profile(user_id):
    cur.execute("SELECT name, age, weight, height, goal FROM users WHERE id = ?", (user_id,))
    return cur.fetchone()

def is_subscribed(user_id):
    cur.execute("SELECT subscription_end_date FROM users WHERE id = ?", (user_id,))
    result = cur.fetchone()
    if result and result[0]:
        sub_end = datetime.fromisoformat(result[0])
        now = datetime.now()
        return now < sub_end
    return False

def get_trial_days_left(user_id):
    cur.execute("SELECT trial_used, subscription_end_date FROM users WHERE id = ?", (user_id,))
    result = cur.fetchone()
    if result:
        trial_used, sub_end_str = result
        if trial_used and sub_end_str:
            sub_end = datetime.fromisoformat(sub_end_str)
            now = datetime.now()
            if now < sub_end:
                delta = sub_end - now
                return delta.days + 1
    return 0

def add_achievement(user_id, title, description):
    now = datetime.now().isoformat()
    cur.execute("INSERT INTO achievements (user_id, title, description, unlocked_date) VALUES (?, ?, ?, ?)",
                (user_id, title, description, now))
    conn.commit()

def check_and_award_achievements(user_id, profile):
    # –ü—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    if profile and profile[0]: # –ï—Å–ª–∏ –∏–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        cur.execute("SELECT id FROM achievements WHERE user_id = ? AND title = ?", (user_id, "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"))
        if cur.fetchone() is None:
            add_achievement(user_id, "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "–ó–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞—á–∞–ª –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é!")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cur.execute("SELECT id, trial_used FROM users WHERE id = ?", (user_id,))
    result = cur.fetchone()

    if not result:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
        cur.execute("INSERT INTO users (id, name) VALUES (?, ?)", (user_id, username))
        conn.commit()

        # –í—ã–¥–∞—ë–º –ø—Ä–æ–±–Ω—É—é –Ω–µ–¥–µ–ª—é, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
        cur.execute("SELECT trial_used FROM users WHERE id = ?", (user_id,))
        trial_used_result = cur.fetchone()
        if not trial_used_result or not trial_used_result[0]:
            trial_end_date = datetime.now() + timedelta(days=7)
            cur.execute("UPDATE users SET trial_used = TRUE, subscription_end_date = ? WHERE id = ?", (trial_end_date.isoformat(), user_id))
            conn.commit()
            logger.info(f"–í—ã–¥–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await message.answer("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è –Ø —Ç–≤–æ–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –¢—ã –ø–æ–ª—É—á–∏–ª <b>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏</b>! –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            user_states[user_id] = {"step": "name"}
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è –Ø —Ç–≤–æ–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            user_states[user_id] = {"step": "name"}
    else:
        # –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        logger.info(f"–°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÇÔ∏è –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    if is_subscribed(message.from_user.id):
        days_left = get_trial_days_left(message.from_user.id)
        sub_end = datetime.fromisoformat(cur.execute("SELECT subscription_end_date FROM users WHERE id = ?", (message.from_user.id,)).fetchone()[0])
        await message.answer(f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {sub_end.strftime('%d.%m.%Y')}.")
        if days_left > 0:
            await message.answer(f"–ò–∑ –Ω–∏—Ö <b>{days_left} –¥–Ω–µ–π</b> ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç –ø—Ä–æ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 499 —Ä—É–±", callback_data="buy_month")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 2499 —Ä—É–±", callback_data="buy_half_year")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 4999 —Ä—É–±", callback_data="buy_year")],
    ])
    await message.answer("<b>–¢–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                         "1 –º–µ—Å—è—Ü ‚Äî 499 —Ä—É–±\n"
                         "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2499 —Ä—É–± (416 —Ä—É–±/–º–µ—Å)\n"
                         "1 –≥–æ–¥ ‚Äî 4999 —Ä—É–± (416 —Ä—É–±/–º–µ—Å)\n\n"
                         "<a href='https://yourdomain.com/offerta'>–û—Ñ–µ—Ä—Ç–∞</a>\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('buy_'))
async def process_subscription_choice(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    choice = callback_query.data

    prices = {
        "buy_month": 499,
        "buy_half_year": 2499,
        "buy_year": 4999
    }
    months = {
        "buy_month": 1,
        "buy_half_year": 6,
        "buy_year": 12
    }

    price = prices[choice]
    months_added = months[choice]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Robokassa
    inv_id = user_id # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ InvoiceID
    desc = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months_added} –º–µ—Å—è—Ü–µ–≤"
    signature = hashlib.md5(f"{ROBOKASSA_LOGIN}:{price}:{inv_id}:{ROBOKASSA_PASS1}:shp_userid={user_id}".encode()).hexdigest()

    params = {
        'MerchantLogin': ROBOKASSA_LOGIN,
        'OutSum': price,
        'InvId': inv_id,
        'Desc': desc,
        'SignatureValue': signature,
        'Shp_userid': user_id,
        'Culture': 'ru',
        'Encoding': 'utf-8'
    }
    robokassa_url = "https://auth.robokassa.ru/Merchant/Index.aspx?" + urlencode(params)

    await bot.send_message(user_id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months_added} –º–µ—Å—è—Ü–µ–≤ ({price} —Ä—É–±):\n{robokassa_url}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã Robokassa ---
@dp.message(Command("check_payment")) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è —Ç–µ—Å—Ç–∞)
async def cmd_check_payment(message: types.Message):
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, —ç—Ç–æ –±—É–¥–µ—Ç callback –æ—Ç Robokassa –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user_id = message.from_user.id
    # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    new_sub_end_date = datetime.now() + timedelta(days=30) # –ü—Ä–∏–º–µ—Ä: 1 –º–µ—Å—è—Ü
    cur.execute("UPDATE users SET subscription_end_date = ? WHERE id = ?", (new_sub_end_date.isoformat(), user_id))
    conn.commit()
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∫–µ—Ç—ã ---
@dp.message(lambda message: message.from_user.id in user_states)
async def process_profile(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if state["step"] == "name":
        user_states[user_id]["name"] = message.text
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        user_states[user_id]["step"] = "age"

    elif state["step"] == "age":
        try:
            age = int(message.text)
            if 10 <= age <= 120:
                user_states[user_id]["age"] = age
                await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?")
                user_states[user_id]["step"] = "weight"
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120).")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    elif state["step"] == "weight":
        try:
            weight = float(message.text.replace(',', '.'))
            if 30 <= weight <= 300:
                user_states[user_id]["weight"] = weight
                await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
                user_states[user_id]["step"] = "height"
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (30-300).")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    elif state["step"] == "height":
        try:
            height = int(message.text)
            if 100 <= height <= 250:
                user_states[user_id]["height"] = height
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_lose_weight")],
                    [InlineKeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É", callback_data="goal_gain_muscle")],
                    [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É", callback_data="goal_maintain")]
                ])
                await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=keyboard)
                user_states[user_id]["step"] = "goal_choice"
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (100-250).")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ ---
@dp.callback_query(lambda c: c.data.startswith('goal_'))
async def process_goal_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_states or user_states[user_id]["step"] != "goal_choice":
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
        return

    goals = {
        "goal_lose_weight": "–ü–æ—Ö—É–¥–µ—Ç—å",
        "goal_gain_muscle": "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É",
        "goal_maintain": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"
    }
    goal = goals[callback_query.data]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    data = user_states[user_id]
    cur.execute("UPDATE users SET name=?, age=?, weight=?, height=?, goal=? WHERE id = ?",
                (data["name"], data["age"], data["weight"], data["height"], goal, user_id))
    conn.commit()

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if user_id in user_states:
        del user_states[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞—ë–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    profile = get_user_profile(user_id)
    check_and_award_achievements(user_id, profile)

    await bot.send_message(user_id, f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ò–º—è: {data['name']}, –í–æ–∑—Ä–∞—Å—Ç: {data['age']}, –í–µ—Å: {data['weight']} –∫–≥, –†–æ—Å—Ç: {data['height']} —Å–º, –¶–µ–ª—å: {goal}. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫–∏) ---
@dp.message(Command("training"))
async def cmd_training(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    profile = get_user_profile(user_id)
    if not profile:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        return

    name, age, weight, height, goal = profile
    prompt = f"""
    –¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –°–æ–∑–¥–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
    - –ò–º—è: {name}
    - –í–æ–∑—Ä–∞—Å—Ç: {age}
    - –í–µ—Å: {weight} –∫–≥
    - –†–æ—Å—Ç: {height} —Å–º
    - –¶–µ–ª—å: {goal}
    - –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: –Ω–∞—á–∞–ª—å–Ω—ã–π (–µ—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç > 50 –∏–ª–∏ –≤–µ—Å > 100 –∫–≥, —É—á–∏—Ç—ã–≤–∞–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å)
    - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞—Ä—è–¥—ã: —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ, —Å—Ç—É–ª, —Å—Ç–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç).
    - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30-45 –º–∏–Ω—É—Ç.
    –í–µ—Ä–Ω–∏ –ü–õ–ê–ù –¢–†–ï–ù–ò–†–û–í–ö–ò –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥—Ö–æ–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –æ—Ç–¥—ã—Ö–æ–º –º–µ–∂–¥—É.
    """

    try:
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000
        )
        training_plan = response.choices[0].message.content
        await message.answer(f"<b>–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{training_plan}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("food"))
async def cmd_food(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ç–∞–Ω–∏—é –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    profile = get_user_profile(user_id)
    if not profile:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        return

    name, age, weight, height, goal = profile
    prompt = f"""
    –¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –°–æ–∑–¥–∞–π –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ–Ω—é –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
    - –ò–º—è: {name}
    - –í–æ–∑—Ä–∞—Å—Ç: {age}
    - –í–µ—Å: {weight} –∫–≥
    - –†–æ—Å—Ç: {height} —Å–º
    - –¶–µ–ª—å: {goal}
    - –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ—Ç
    - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –∑–¥–æ—Ä–æ–≤–∞—è, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∏—â–∞
    –í–µ—Ä–Ω–∏ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –≤ –≤–∏–¥–µ: –ó–∞–≤—Ç—Ä–∞–∫, –û–±–µ–¥, –£–∂–∏–Ω, –ü–µ—Ä–µ–∫—É—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª—é–¥ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.
    """

    try:
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000
        )
        food_plan = response.choices[0].message.content
        await message.answer(f"<b>–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{food_plan}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("progress"))
async def cmd_progress(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    text = message.text.split()
    if len(text) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /progress <–≤–µ—Å>")
        return

    try:
        weight = float(text[1].replace(',', '.'))
        if not (30 <= weight <= 300):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).")
        return

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cur.execute("INSERT INTO progress (user_id, weight, date) VALUES (?, ?, ?)", (user_id, weight, now))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–µ—Å –≤ –Ω–æ—Ä–º–µ")
    profile = get_user_profile(user_id)
    if profile:
        height_m = profile[3] / 100
        bmi = weight / (height_m ** 2)
        if 18.5 <= bmi <= 24.9:
            cur.execute("SELECT id FROM achievements WHERE user_id = ? AND title = ?", (user_id, "–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞"))
            if cur.fetchone() is None:
                add_achievement(user_id, "–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞", "BMI –≤ –Ω–æ—Ä–º–µ!")

    await message.answer(f"–í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω. –î–∞—Ç–∞: {now.split()[0]}")

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    profile = get_user_profile(user_id)
    if not profile:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        return

    name, age, weight, height, goal = profile
    sub_end = None
    cur.execute("SELECT subscription_end_date FROM users WHERE id = ?", (user_id,))
    sub_result = cur.fetchone()
    if sub_result and sub_result[0]:
        sub_end = datetime.fromisoformat(sub_result[0])

    days_left = get_trial_days_left(user_id)
    sub_info = ""
    if sub_end:
        sub_info = f"\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end.strftime('%d.%m.%Y')}"
    if days_left > 0:
        sub_info += f"\n(–∏–∑ –Ω–∏—Ö {days_left} –¥–Ω–µ–π ‚Äî –ø—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è)"

    await message.answer(f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
                         f"–ò–º—è: {name}\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                         f"–í–µ—Å: {weight} –∫–≥\n"
                         f"–†–æ—Å—Ç: {height} —Å–º\n"
                         f"–¶–µ–ª—å: {goal}{sub_info}")

@dp.message(Command("achievements"))
async def cmd_achievements(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    cur.execute("SELECT title, description, unlocked_date FROM achievements WHERE user_id = ?", (user_id,))
    achs = cur.fetchall()

    if not achs:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    ach_text = "<b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    for title, desc, date in achs:
        ach_text += f"üèÜ <b>{title}</b>\n<i>{desc}</i>\n–î–∞—Ç–∞: {date[:10]}\n\n"

    await message.answer(ach_text)

# --- –ß–∞—Ç —Å –ò–ò ---
@dp.message(Command("chat"))
async def cmd_chat(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É —Å –ò–ò –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    profile = get_user_profile(user_id)
    if not profile:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /start")
        return

    prompt = f"–¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å. –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {profile[0]}, –í–æ–∑—Ä–∞—Å—Ç: {profile[1]}, –í–µ—Å: {profile[2]} –∫–≥, –†–æ—Å—Ç: {profile[3]} —Å–º, –¶–µ–ª—å: {profile[4]}. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message.text[6:]}" # [6:] —É–±–∏—Ä–∞–µ—Ç "/chat "

    try:
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500
        )
        ai_response = response.choices[0].message.content
        await message.answer(ai_response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ò–ò: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ê–Ω–∞–ª–∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞ ---
@dp.message(Command("analyze_food"))
async def cmd_analyze_food(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–∏—Ç–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    food_description = message.text[14:] # –£–±–∏—Ä–∞–µ–º "/analyze_food "
    if not food_description.strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /analyze_food <–æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã>")
        return

    profile = get_user_profile(user_id)
    prompt = f"""
    –¢—ã –ò–ò-—Ç—Ä–µ–Ω–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Ç–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: "{food_description}".
    –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –¥–∞–Ω–Ω—ã–µ: –ò–º—è: {profile[0]}, –í–æ–∑—Ä–∞—Å—Ç: {profile[1]}, –í–µ—Å: {profile[2]} –∫–≥, –†–æ—Å—Ç: {profile[3]} —Å–º, –¶–µ–ª—å: {profile[4]}.
    –û—Ü–µ–Ω–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ). –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """

    try:
        response = client.chat.completions.create(
            model="openchat/openchat-7b",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500
        )
        analysis = response.choices[0].message.content
        await message.answer(f"<b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞:</b>\n\n{analysis}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Ü–∏–æ–Ω–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Ü–∏–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
@dp.message(Command("graph"))
async def cmd_graph(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä–∞—Ñ–∏–∫—É –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    cur.execute("SELECT date, weight FROM progress WHERE user_id = ? ORDER BY date ASC", (user_id,))
    data = cur.fetchall()

    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –î–æ–±–∞–≤—å—Ç–µ –≤–µ—Å —Å –ø–æ–º–æ—â—å—é /progress.")
        return

    dates = [datetime.fromisoformat(d[0]) for d in data]
    weights = [d[1] for d in data]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, weights, marker='o')
    plt.title(f'–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–í–µ—Å (–∫–≥)')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    img_buffer.seek(0)
    plt.close() # –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

    input_file = BufferedInputFile(img_buffer.getvalue(), filename='progress_graph.png')
    await message.answer_document(input_file)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(Command("set_reminder_time"))
async def cmd_set_reminder_time(message: types.Message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        await message.answer("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. /subscribe")
        return

    text = message.text.split()
    if len(text) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /set_reminder_time HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)")
        return

    time_str = text[1]
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(time_str, "%H:%M")
        reminder_times[user_id] = time_str
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduler.remove_job(job_id=f"remind_{user_id}", jobstore='default')
        hour, minute = map(int, time_str.split(':'))
        scheduler.add_job(remind_workout, "cron", hour=hour, minute=minute, id=f"remind_{user_id}", args=[user_id])
        await message.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00).")

async def remind_workout(user_id):
    try:
        await bot.send_message(user_id, "–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ /training –∏ /food —Å–µ–≥–æ–¥–Ω—è!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–æ–Ω –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å webhook)
    await dp.start_polling(bot)

# --- Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ---
app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    update_data = request.get_json()
    update = types.Update(**update_data)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ asyncio
    asyncio.create_task(dp.process_update(update))
    return 'OK', 200

# --- –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_flask():
    app.run(host='0.0.0.0', port=8000, debug=False, use_reloader=False)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª aiogram (–≤–µ–±—Ö—É–∫–∏)
    asyncio.run(main())